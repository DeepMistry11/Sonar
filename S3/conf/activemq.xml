<?xml version="1.0" encoding="UTF-8"?>

<!--
    *** NJIT AMQ Config Template for use in xNET
    *** CS798/CS656 students: DO NOT edit this file
    *** for any reason!
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd   http://activemq.apache.org/schema/core http://activemq.apache.org/schema/core/activemq-core.xsd">
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:${activemq.conf}/credentials.properties</value>
        </property>
    </bean>

   <!-- Allows accessing the server log -->
    <bean class="org.fusesource.insight.log.log4j.Log4jLogQuery" destroy-method="stop" id="logQuery" init-method="start" lazy-init="false" scope="singleton">
    </bean>

    <!--
        The <broker> element is used to configure the ActiveMQ broker.
        CS656 KM - same broker "name" for all groups!
    -->
    <broker xmlns="http://activemq.apache.org/schema/core" brokerName="SONAR" dataDirectory="${activemq.data}">

<plugins>
      <simpleAuthenticationPlugin>
        <users>
          <authenticationUser username="adm"  password="manage" groups="admins"/>
          <authenticationUser username="usr"  password="using"  groups="staff"/>
        </users>
      </simpleAuthenticationPlugin>

      <authorizationPlugin>
        <map>
          <authorizationMap>
            <authorizationEntries>
              <authorizationEntry queue=">" write="admins" read="admins" admin="admins" />
              <authorizationEntry topic=">" write="admins" read="admins" admin="admins" />
              <authorizationEntry queue=">" write="staff" read="staff"  />
              <authorizationEntry topic=">" write="staff" read="staff"  />
            </authorizationEntries>
          </authorizationMap>
        </map>
      </authorizationPlugin>
</plugins>

    <destinations>
      <queue physicalName="QSONAR" />
      <topic physicalName="TSONAR" />
      <topic physicalName="ActiveMQ.Advisory.Connection" />            <!-- needed for queues -->
      <topic physicalName="ActiveMQ.Advisory.Producer.Queue.QSONAR" /><!-- needed for queues -->
      <topic physicalName="ActiveMQ.Advisory.Producer.Topic.QSONAR" /><!-- needed for queues -->
      <topic physicalName="ActiveMQ.Advisory.Consumer.Queue.QSONAR" /><!-- needed for queues -->
      <topic physicalName="ActiveMQ.Advisory.Consumer.Topic.QSONAR" /><!-- needed for queues -->
         <!-- below created to "enable" MYQ.TOPIC stuff -->
      <topic physicalName="ActiveMQ.Advisory.Producer.Topic.TSONAR" /><!-- needed for topic MYQ.MIN3 -->
      <topic physicalName="ActiveMQ.Advisory.Consumer.Topic.TSONAR" /><!-- needed for topic MYQ.MIN3 -->
    </destinations>
        <destinationPolicy>
            <policyMap>
              <policyEntries>
                <policyEntry topic="&gt;">
                    <!-- The constantPendingMessageLimitStrategy is used to prevent
                         slow topic consumers to block producers and affect other consumers
                         by limiting the number of messages that are retained
                         For more information, see:

                         http://activemq.apache.org/slow-consumer-handling.html

                    -->
                  <pendingMessageLimitStrategy>
                    <constantPendingMessageLimitStrategy limit="1000"/>
                  </pendingMessageLimitStrategy>
                </policyEntry>
              </policyEntries>
            </policyMap>
        </destinationPolicy>


        <!--
            The managementContext is used to configure how ActiveMQ is exposed in
            JMX. By default, ActiveMQ uses the MBean server that is started by
            the JVM. For more information, see:

            http://activemq.apache.org/jmx.html
        -->
        <managementContext>
            <managementContext createConnector="false"/>
        </managementContext>

        <!--
            Configure message persistence for the broker. The default persistence
            mechanism is the KahaDB store (identified by the kahaDB tag).
            For more information, see:

            http://activemq.apache.org/persistence.html
        -->
        <persistenceAdapter>
            <kahaDB directory="${activemq.data}/kahadb"/>
        </persistenceAdapter>


          <!--
            The systemUsage controls the maximum amount of space the broker will
            use before disabling caching and/or slowing down producers. For more information, see:
            http://activemq.apache.org/producer-flow-control.html
          -->
          <systemUsage>
            <systemUsage>
                <memoryUsage>
                    <memoryUsage percentOfJvmHeap="50"/>
                </memoryUsage>
                <storeUsage>
                    <storeUsage limit="400 mb"/>
                </storeUsage>
                <tempUsage>
                    <tempUsage limit="400 mb"/>
                </tempUsage>
            </systemUsage>
        </systemUsage>

        <!--
            The transport connectors expose ActiveMQ over a given protocol to
            clients and other brokers. For more information, see:

            http://activemq.apache.org/configuring-transports.html
        -->
        <transportConnectors>
            <!-- DOS protection, limit concurrent connections to 1000 and frame size to 100MB -->
            <!-- CS656 KM further reduces to 50 conns, 2MB (approx) frames -->
            <transportConnector name="openwire" uri="tcp://0.0.0.0:33080?maximumConnections=50&amp;wireFormat.maxFrameSize=2048576"/>
            <!-- don't need these, CS656 KM
            <transportConnector name="amqp" uri="amqp://0.0.0.0:5672?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="stomp" uri="stomp://0.0.0.0:61613?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="mqtt" uri="mqtt://0.0.0.0:1883?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            <transportConnector name="ws" uri="ws://0.0.0.0:61614?maximumConnections=1000&amp;wireFormat.maxFrameSize=104857600"/>
            -->
        </transportConnectors>

        <!-- destroy the spring context on shutdown to stop jetty -->
        <shutdownHooks>
            <bean xmlns="http://www.springframework.org/schema/beans" class="org.apache.activemq.hooks.SpringContextHook"/>
        </shutdownHooks>

    </broker>

    <!--
        Enable web consoles, REST and Ajax APIs and demos
        The web consoles requires by default login, you can disable this in the jetty.xml file

        Take a look at ${ACTIVEMQ_HOME}/conf/jetty.xml for more details
     import resource="jetty.xml"/  jetty disabled KM, use app to monitor!
    -->

</beans>
